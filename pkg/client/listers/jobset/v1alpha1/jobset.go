/*
Copyright 2021 The Volcano Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "volcano.sh/apis/pkg/apis/jobset/v1alpha1"
)

// JobsetLister helps list Jobsets.
// All objects returned here must be treated as read-only.
type JobsetLister interface {
	// List lists all Jobsets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Jobset, err error)
	// Jobsets returns an object that can list and get Jobsets.
	Jobsets(namespace string) JobsetNamespaceLister
	JobsetListerExpansion
}

// jobsetLister implements the JobsetLister interface.
type jobsetLister struct {
	indexer cache.Indexer
}

// NewJobsetLister returns a new JobsetLister.
func NewJobsetLister(indexer cache.Indexer) JobsetLister {
	return &jobsetLister{indexer: indexer}
}

// List lists all Jobsets in the indexer.
func (s *jobsetLister) List(selector labels.Selector) (ret []*v1alpha1.Jobset, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Jobset))
	})
	return ret, err
}

// Jobsets returns an object that can list and get Jobsets.
func (s *jobsetLister) Jobsets(namespace string) JobsetNamespaceLister {
	return jobsetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// JobsetNamespaceLister helps list and get Jobsets.
// All objects returned here must be treated as read-only.
type JobsetNamespaceLister interface {
	// List lists all Jobsets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Jobset, err error)
	// Get retrieves the Jobset from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Jobset, error)
	JobsetNamespaceListerExpansion
}

// jobsetNamespaceLister implements the JobsetNamespaceLister
// interface.
type jobsetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Jobsets in the indexer for a given namespace.
func (s jobsetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Jobset, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Jobset))
	})
	return ret, err
}

// Get retrieves the Jobset from the indexer for a given namespace and name.
func (s jobsetNamespaceLister) Get(name string) (*v1alpha1.Jobset, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("jobset"), name)
	}
	return obj.(*v1alpha1.Jobset), nil
}
